"use client";

import { zodResolver } from "@hookform/resolvers/zod";
import { useForm } from "react-hook-form";
import * as z from "zod";
import type { Appointment, Doctor, Patient } from "@/lib/types";
import { Button } from "@/components/ui/button";
import { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover";
import { Calendar } from "@/components/ui/calendar";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { cn } from "@/lib/utils";
import { CalendarIcon } from "lucide-react";
import { format } from "date-fns";
import { Textarea } from "@/components/ui/textarea";
import { addAppointment, updateAppointment } from "@/lib/actions";
import { useToast } from "@/hooks/use-toast";

const appointmentFormSchema = z.object({
  patientId: z.string().min(1, "Patient is required."),
  doctorId: z.string().min(1, "Doctor is required."),
  dateTime: z.date({ required_error: "Date and time are required." }),
  type: z.string().min(2, "Appointment type must be at least 2 characters.").max(50),
  status: z.enum(["Scheduled", "Completed", "Cancelled"]),
  notes: z.string().optional(),
});

type AppointmentFormValues = z.infer<typeof appointmentFormSchema>;

interface AppointmentFormProps {
  appointment?: Appointment | null;
  doctors: Doctor[];
  patients: Patient[];
  onSubmitSuccess: (appointment: Appointment) => void;
  onCancel: () => void;
}

export function AppointmentForm({ appointment, doctors, patients, onSubmitSuccess, onCancel }: AppointmentFormProps) {
  const { toast } = useToast();
  const form = useForm<AppointmentFormValues>({
    resolver: zodResolver(appointmentFormSchema),
    defaultValues: {
      patientId: appointment?.patientId || "",
      doctorId: appointment?.doctorId || "",
      dateTime: appointment?.dateTime ? new Date(appointment.dateTime) : new Date(),
      type: appointment?.type || "",
      status: appointment?.status || "Scheduled",
      notes: appointment?.notes || "",
    },
  });

  const isSubmitting = form.formState.isSubmitting;

  async function onSubmit(values: AppointmentFormValues) {
    const selectedPatient = patients.find(p => p.id === values.patientId);
    const selectedDoctor = doctors.find(d => d.id === values.doctorId);

    if (!selectedPatient || !selectedDoctor) {
      toast({ title: "Error", description: "Invalid patient or doctor selected.", variant: "destructive" });
      return;
    }
    
    const appointmentData = {
      ...values,
      dateTime: values.dateTime.toISOString(),
      patientName: selectedPatient.name, // Denormalize for easier display
      doctorName: selectedDoctor.name,   // Denormalize
    };

    try {
      if (appointment) {
        const updatedAppointmentData: Appointment = { ...appointment, ...appointmentData };
        const result = await updateAppointment(updatedAppointmentData);
        if (result) {
          onSubmitSuccess(result);
        } else {
          toast({ title: "Error", description: "Failed to update appointment.", variant: "destructive" });
        }
      } else {
        // For addAppointment, the ID is generated by the action
        const { id, ...newAppointmentData } = appointmentData; 
        const result = await addAppointment(newAppointmentData as Omit<Appointment, 'id'>);
        onSubmitSuccess(result);
      }
    } catch (error) {
       console.error("Failed to save appointment:", error);
       toast({ title: "Error", description: "An error occurred while saving the appointment.", variant: "destructive" });
    }
  }

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6 max-h-[70vh] overflow-y-auto p-1 pr-4">
        <FormField
          control={form.control}
          name="patientId"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Patient</FormLabel>
              <Select onValueChange={field.onChange} defaultValue={field.value}>
                <FormControl><SelectTrigger><SelectValue placeholder="Select a patient" /></SelectTrigger></FormControl>
                <SelectContent>
                  {patients.map(p => <SelectItem key={p.id} value={p.id}>{p.name}</SelectItem>)}
                </SelectContent>
              </Select>
              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          control={form.control}
          name="doctorId"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Doctor</FormLabel>
              <Select onValueChange={field.onChange} defaultValue={field.value}>
                <FormControl><SelectTrigger><SelectValue placeholder="Select a doctor" /></SelectTrigger></FormControl>
                <SelectContent>
                  {doctors.map(d => <SelectItem key={d.id} value={d.id}>{d.name} ({d.specialty})</SelectItem>)}
                </SelectContent>
              </Select>
              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          control={form.control}
          name="dateTime"
          render={({ field }) => (
            <FormItem className="flex flex-col">
              <FormLabel>Date and Time</FormLabel>
              <Popover>
                <PopoverTrigger asChild>
                  <FormControl>
                    <Button
                      variant={"outline"}
                      className={cn("pl-3 text-left font-normal", !field.value && "text-muted-foreground")}
                    >
                      {field.value ? format(field.value, "PPP p") : <span>Pick a date and time</span>}
                      <CalendarIcon className="ml-auto h-4 w-4 opacity-50" />
                    </Button>
                  </FormControl>
                </PopoverTrigger>
                <PopoverContent className="w-auto p-0" align="start">
                  <Calendar mode="single" selected={field.value} onSelect={field.onChange} initialFocus />
                  {/* Basic Time Picker - could be improved with a dedicated time input component */}
                  <div className="p-2 border-t border-border">
                     <Input 
                        type="time" 
                        defaultValue={field.value ? format(field.value, "HH:mm") : "09:00"}
                        onChange={(e) => {
                            const newDate = field.value ? new Date(field.value) : new Date();
                            const [hours, minutes] = e.target.value.split(':');
                            newDate.setHours(parseInt(hours, 10));
                            newDate.setMinutes(parseInt(minutes, 10));
                            field.onChange(newDate);
                        }}
                      />
                  </div>
                </PopoverContent>
              </Popover>
              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          control={form.control}
          name="type"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Appointment Type</FormLabel>
              <FormControl><Input placeholder="e.g., Consultation, Check-up" {...field} /></FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          control={form.control}
          name="status"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Status</FormLabel>
              <Select onValueChange={field.onChange} defaultValue={field.value}>
                <FormControl><SelectTrigger><SelectValue placeholder="Select status" /></SelectTrigger></FormControl>
                <SelectContent>
                  <SelectItem value="Scheduled">Scheduled</SelectItem>
                  <SelectItem value="Completed">Completed</SelectItem>
                  <SelectItem value="Cancelled">Cancelled</SelectItem>
                </SelectContent>
              </Select>
              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          control={form.control}
          name="notes"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Notes (Optional)</FormLabel>
              <FormControl><Textarea placeholder="Any notes for this appointment" className="resize-none" {...field} /></FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <div className="flex justify-end gap-2 pt-4">
          <Button type="button" variant="outline" onClick={onCancel} disabled={isSubmitting}>Cancel</Button>
          <Button type="submit" disabled={isSubmitting}>
             {isSubmitting ? (appointment ? "Saving..." : "Scheduling...") : (appointment ? "Save Changes" : "Schedule Appointment")}
          </Button>
        </div>
      </form>
    </Form>
  );
}
